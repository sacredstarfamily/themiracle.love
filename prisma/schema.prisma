generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  content   String?
  published Boolean  @default(false)
  authorId  String
  User      User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Profile {
  id     String  @id @default(cuid())
  bio    String?
  userId String  @unique
  User   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id                  String    @id @default(cuid())
  name                String?   @db.VarChar(255)
  email               String    @unique @db.VarChar(255)
  hashedPassword      String    @db.VarChar(255)
  verificationToken   String    @default(uuid())
  sessionToken        String?   @db.VarChar(255)
  emailVerified       Boolean   @default(false)
  walletAddress       String?
  wallets             Json?
  location            Json?
  Post                Post[]
  Profile             Profile?
  Session             Session?
  Order               Order[]
  passwordResetLink   String?   @default(uuid())
  passwordResetToken  Int?
  passwordResetExpiry DateTime?

  @@unique([id, sessionToken])
}

model Session {
  sessionId String   @unique
  userId    String   @unique
  User      User     @relation(fields: [userId, sessionId], references: [id, sessionToken], onDelete: Cascade, onUpdate: Cascade)
  ExpiresAt DateTime

  @@unique([userId, sessionId])
}

enum FulfillmentStatus {
  PENDING
  PROCESSING
  FULFILLED
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  status    String   @default("PENDING")
  userId    String? // Make optional for guest orders
  User      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items     Item[]

  // PayPal order details
  paypal_order_id       String? // PayPal order ID
  paypal_payer_id       String? // PayPal payer ID
  paypal_payer_email    String? // Payer's email from PayPal
  paypal_payer_name     String? // Payer's name from PayPal
  paypal_capture_id     String? // PayPal capture transaction ID
  paypal_transaction_id String? // PayPal transaction ID
  total_amount          Float? // Total order amount
  currency_code         String?   @default("USD") // Currency (USD, EUR, etc.)
  payment_method        String? // Payment method (paypal, card, etc.)
  payment_status        String? // Payment status (COMPLETED, PENDING, FAILED)
  payment_date          DateTime? // When payment was completed

  // Fulfillment tracking
  fulfillment_status FulfillmentStatus @default(PENDING)

  // Additional metadata
  order_notes      String? // Any order notes or special instructions
  shipping_address Json? // Shipping address if physical goods
  billing_address  Json? // Billing address
  order_metadata   Json? // Additional order data (cart items, discounts, etc.)

  @@index([paypal_order_id])
  @@index([paypal_capture_id])
  @@index([payment_status])
  @@index([fulfillment_status])
  @@index([userId, createdAt])
}

model Item {
  id                String  @id @default(cuid())
  name              String
  img_url           String
  price             Float
  quantity          Int
  paypal_product_id String? // Add this field
  Order             Order?  @relation(fields: [orderId], references: [id])
  orderId           String?
}
